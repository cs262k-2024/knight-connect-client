/*
    ESLint config for linter (maintain clean code)
*/

{
    "env": {
        "browser": true,
        "es2021": true
    },
    "root": true,
    "overrides": [],
    "parser": "@typescript-eslint/parser",
    "ignorePatterns": ["node_modules/"],
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module",
        "ecamFeatures": {
            "jsx": true
        }
    },
    "plugins": ["react", "@typescript-eslint"],
    "settings": {
        "react": {
            "version": "detect"
        }
    },
    "rules": {
        "react/no-unescaped-entities": "off",
        "no-constant-condition": "error",
        "no-dupe-else-if": "error",
        "no-dupe-args": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-duplicate-imports": "error",
        "no-ex-assign": "error",
        "no-fallthrough": "warn",
        "no-func-assign": "warn",
        "no-import-assign": "error",
        "no-irregular-whitespace": [
            "error",
            {
                "skipStrings": true,
                "skipComments": true,
                "skipTemplates": true
            }
        ],
        "no-self-assign": "warn",
        "no-self-compare": "warn",
        "no-template-curly-in-string": "warn",
        "no-unmodified-loop-condition": "warn",
        "no-unreachable": "error",
        "no-unreachable-loop": "warn",
        // ! All variables should be in use. If variable/variable use is WIP, prepend `_`
        "@typescript-eslint/no-unused-vars": [
            "warn",
            {
                "argsIgnorePattern": "^_",
                "varsIgnorePattern": "^_",
                "caughtErrorsIgnorePattern": "^_"
            }
        ],
        // ! Enforce camelCase naming convention
        "camelcase": [
            "warn",
            {
                "ignoreGlobals": true
            }
        ],
        "eqeqeq": "error",
        "no-console": "warn",
        "prefer-const": "error",
        "no-with": "error",
        "no-void": "error",
        "no-var": "error",
        "no-eval": "error",
        "arrow-spacing": [
            "error",
            {
                "before": true,
                "after": true
            }
        ],
        "block-spacing": "error",
        "brace-style": ["error", "stroustrup"],
        "comma-dangle": ["error", "only-multiline"],
        "comma-spacing": "error",
        "eol-last": "error",
        // ! All quotes should be single quotes
        "quotes": [
            "error",
            "single",
            {
                "allowTemplateLiterals": true
            }
        ],
        // ! Except inside JSX blocks. e.g <Component prop="value" />
        "jsx-quotes": ["error", "prefer-double"],
        // ! Semi-colons should always be included
        "semi": ["error", "always"],
        "no-extra-semi": "error",
        "react/react-in-jsx-scope": "off",
        // ! Contents in between curly braces should be spaced. e.g. { foo }
        "object-curly-spacing": ["error", "always"],
        // ! This includes props and code blocks in JSX
        "react/jsx-curly-spacing": [
            "error",
            {
                "when": "always",
                "children": true
            }
        ],
        "react/jsx-wrap-multilines": [
            "error",
            {
                "declaration": "parens-new-line",
                "assignment": "parens-new-line",
                "return": "parens-new-line",
                "arrow": "parens-new-line",
                "condition": "parens-new-line",
                "logical": "parens-new-line",
                "prop": "parens-new-line"
            }
        ],
        // ! React components should be defined by an explicit function declaration
        "react/function-component-definition": [
            "error",
            {
                "namedComponents": "function-declaration",
                "unnamedComponents": "arrow-function"
            }
        ]
    }
}
